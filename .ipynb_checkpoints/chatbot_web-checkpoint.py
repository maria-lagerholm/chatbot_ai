{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "7b04b2e6-2577-4429-8331-8d9512f239ba",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "DeltaGenerator()"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import streamlit as st\n",
    "import openai\n",
    "import os\n",
    "\n",
    "# Set your OpenAI API key here\n",
    "openai.api_key = os.getenv(\"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\")\n",
    "\n",
    "# Function to interact with the GPT-3.5-turbo model with tunable parameters\n",
    "def generate_response(prompt, temperature=0, max_tokens=512, top_p=0.9, n=2, stop=None, frequency_penalty=0.9, presence_penalty=0.9, chat_history=None):\n",
    "    if chat_history is None:\n",
    "        chat_history = []\n",
    "\n",
    "    messages = [\n",
    "        {\"role\": \"system\", \"content\": \"You are a helpful assistant.\"},\n",
    "        {\"role\": \"user\", \"content\": prompt},\n",
    "    ]\n",
    "    messages.extend(chat_history)\n",
    "\n",
    "    response = openai.ChatCompletion.create(\n",
    "        model=\"gpt-3.5-turbo\",\n",
    "        messages=messages,\n",
    "        temperature=temperature,\n",
    "        max_tokens=max_tokens,\n",
    "        top_p=top_p,\n",
    "        n=n,\n",
    "        stop=stop,\n",
    "        frequency_penalty=frequency_penalty,\n",
    "        presence_penalty=presence_penalty\n",
    "    )\n",
    "\n",
    "    return response['choices'][0]['message']['content']\n",
    "\n",
    "# Streamlit app header and title\n",
    " # tattooed geek logo\n",
    "logo1 = 'https://miro.medium.com/v2/resize:fit:180/1*ypRBA86IBBbZbti76vm4Hg.png'\n",
    "# Streamlit app header and title\n",
    "st.set_page_config(page_title=\"Personal ChatGPT bot | By Maria Lagerholm\", page_icon=logo1 , layout=\"wide\")\n",
    "\n",
    "\n",
    "st.write(\"# Personal Chatbot with GPT-3.5-turbo :sunglasses: \")\n",
    "st.write(\"Made with love by - [Maria Lagerholm]\")\n",
    "st.write(\"Welcome to your personal chatbot app! Type your message below:\")\n",
    "\n",
    "\n",
    "# Sidebar with social profiles and model parameters\n",
    "st.sidebar.markdown(\"# Follow me on my Social Profiles\")\n",
    "st.sidebar.markdown(\n",
    "    \"\"\"<a href=\"https://github.com/anishsingh20\" target=\"_blank\"><img src=\"https://cdn-icons-png.flaticon.com/512/25/25231.png\" alt=\"GitHub\" width=\"60px\"></a>\n",
    "    <a href=\"https://www.linkedin.com/in/anish-singh-walia-924529103/\" target=\"_blank\"><img src=\"https://cdn1.iconfinder.com/data/icons/logotypes/32/circle-linkedin-512.png\" alt=\"LinkedIn\" width=\"60px\"></a>\n",
    "    <a href=\"https://medium.com/@anishsinghwalia\" target=\"_blank\"><img src=\"https://cdn1.iconfinder.com/data/icons/social-media-circle-7/512/Circled_Medium_svg5-512.png\" alt=\"Medium\" width=\"60px\"></a>\n",
    "    <a href=\"https://instagram.com/cali_br20\" target=\"_blank\"><img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/e/e7/Instagram_logo_2016.svg/2048px-Instagram_logo_2016.svg.png\" alt=\"Instagram\" width=\"60px\"></a>\n",
    "    \"\"\",\n",
    "    unsafe_allow_html=True,\n",
    ")\n",
    "\n",
    "# HTML sidebar to fine-tune model's parameters to customize the bot's responses.\n",
    "st.sidebar.markdown(\"# Model Parameters\")\n",
    "temperature = st.sidebar.slider(\"Temperature\", 0.0, 1.0, 0.7, 0.1)\n",
    "max_tokens = st.sidebar.number_input(\"Max Tokens\", 50, 500, 256, step=50)\n",
    "top_p = st.sidebar.slider(\"Top P\", 0.1, 1.0, 0.9, 0.1)\n",
    "n = st.sidebar.number_input(\"N\", 1, 5, 2, step=1)\n",
    "stop = st.sidebar.text_input(\"Stop\", \"\")\n",
    "frequency_penalty = st.sidebar.slider(\"Frequency Penalty\", 0.0, 1.0, 0.9, 0.1)\n",
    "presence_penalty = st.sidebar.slider(\"Presence Penalty\", 0.0, 1.0, 0.9, 0.1)\n",
    "\n",
    "# Main app where user enters prompt and gets the response\n",
    "user_input = st.text_area(\"You:\", \"\", key=\"user_input\")\n",
    "generate_button = st.button(\"Generate Response\")\n",
    "\n",
    "\n",
    "# Chat history\n",
    "messages = []\n",
    "if user_input.strip() != \"\":\n",
    "    messages.append({\"role\": \"user\", \"content\": user_input})\n",
    "    response = generate_response(user_input, temperature, max_tokens, top_p, n, stop, frequency_penalty, presence_penalty)\n",
    "    messages.append({\"role\": \"assistant\", \"content\": response})\n",
    "\n",
    "st.subheader(\"Chat History\")\n",
    "for message in messages:\n",
    "    if message[\"role\"] == \"user\":\n",
    "        st.text_area(\"You:\", value=message[\"content\"], height=50, max_chars=200, key=\"user_history\", disabled=True)\n",
    "    else:\n",
    "        st.text_area(\"Jarvis:\", value=message[\"content\"], height=500, key=\"chatbot_history\")\n",
    "\n",
    "# Additional styling to make the app visually appealing\n",
    "st.markdown(\n",
    "    \"\"\"\n",
    "    <style>\n",
    "        body {\n",
    "            font-family: Montserrat, sans-serif;\n",
    "        }\n",
    "        .stTextInput>div>div>textarea {\n",
    "            background-color: #f0f0f0;\n",
    "            color: #000;\n",
    "        }\n",
    "        .stButton button {\n",
    "            background-color: #4CAF50;\n",
    "            color: white;\n",
    "            font-weight: bold;\n",
    "        }\n",
    "        .stTextArea>div>textarea {\n",
    "            resize: none;\n",
    "        }\n",
    "        .st-subheader {\n",
    "            margin-top: 20px;\n",
    "            font-size: 16px;\n",
    "        }\n",
    "        .stTextArea>div>div>textarea {\n",
    "            height: 100px;\n",
    "        }\n",
    "    </style>\n",
    "    \"\"\",\n",
    "    unsafe_allow_html=True,\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1fbf8cdf-7215-447d-8895-492de8af3b6c",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9e197606-57e0-487f-bb0a-6b8b951f1008",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0dff6860-a636-4e4e-ab2f-ad5b1815dd30",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "65531e3d-6f32-4058-80f2-102397ee6be2",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.17"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
